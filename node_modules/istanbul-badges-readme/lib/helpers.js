"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseColorConfig = exports.getExitCodeOnError = exports.isNodeErrnoError = exports.readFileAsync = exports.getReadmePath = exports.getCoveragePath = void 0;
const fs_1 = __importDefault(require("fs"));
const logger_1 = require("./logger");
const arguments_1 = require("./arguments");
const constants_1 = require("./constants");
const { logWarn } = (0, logger_1.logger)();
const getCoveragePath = (path) => {
    let coveragePath = path;
    const argPath = (0, arguments_1.getArgumentValue)('coverageDir');
    if (argPath) {
        coveragePath = `${argPath}/coverage-summary.json`;
    }
    return coveragePath;
};
exports.getCoveragePath = getCoveragePath;
const getReadmePath = (path) => {
    let readmePath = path;
    const argPath = (0, arguments_1.getArgumentValue)('readmeDir');
    if (argPath) {
        readmePath = `${argPath}/README.md`;
    }
    return readmePath;
};
exports.getReadmePath = getReadmePath;
const readFileAsync = async (path, encode) => {
    return new Promise((resolve, reject) => {
        fs_1.default.readFile(path, encode, (err, data) => {
            if (err)
                reject(`File not found at: ${path}`);
            resolve(data);
        });
    });
};
exports.readFileAsync = readFileAsync;
/**
 * Asserts that the given `error` was created by Node internals.
 * @param error The error object.
 * @returns `true` if given error object is a NodeJS error.
 */
const isNodeErrnoError = (error) => error instanceof Error && 'code' in error;
exports.isNodeErrnoError = isNodeErrnoError;
/**
 * Handles optional exitCode on eventual application throw.
 * @returns `number` for chosen exit code or undefined
 */
const getExitCodeOnError = () => {
    const argExitCode = +(0, arguments_1.getArgumentValue)('exitCode');
    return argExitCode && !isNaN(argExitCode) ? argExitCode : undefined;
};
exports.getExitCodeOnError = getExitCodeOnError;
/**
 * Parses a string representing colors and their corresponding numeric values into an object.
 * The input string should be formatted as "color:value", with multiple color-value pairs separated by commas.
 * This function specifically expects "red", "yellow", and "brightgreen" as the only valid colors in the string.
 *
 * @param optional {string | false} colorConfigString - The string representation of colors and their values to parse.
 * @returns {{ red: number; yellow: number; brightgreen: number }} An object with keys "red", "yellow", and "brightgreen",
 *          each mapped to their numeric value as specified in the input string.
 * @example parseColorConfig('red:70,yellow:85,brightgreen:95') => { red: 70, yellow: 85, brightgreen: 95 }
 */
const parseColorConfig = (colorConfigString) => {
    if (!colorConfigString) {
        return constants_1.defaultColorThresholds;
    }
    // checks if colorConfigString is in the correct format color:numberThreshold separated by commas
    if (!/^((red|yellow):[0-9]+,?)+$/.test(colorConfigString)) {
        logWarn(`Invalid color configuration string provided: "${colorConfigString}". Using default color thresholds instead.`);
        return constants_1.defaultColorThresholds;
    }
    return colorConfigString.split(',').reduce((acc, colorPair) => {
        const [color, value] = colorPair.split(':');
        if (color === 'red' || color === 'yellow') {
            acc[color] = parseInt(value, 10);
        }
        return acc;
    }, {});
};
exports.parseColorConfig = parseColorConfig;
//# sourceMappingURL=helpers.js.map